name: "pull request check"

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
permissions:
  contents: write

jobs:
  git-secrets:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Checkout awslabs/git-secrets
        uses: actions/checkout@v2
        with:
          repository: awslabs/git-secrets
          ref: master
          path: git-secrets
      - name: Install git-secrets
        run: cd git-secrets && sudo make install && cd ..
      - name: Run git-secrets
        run: |
          git-secrets --register-aws
          git-secrets --scan
  
  opensource-license-review:
    needs: git-secrets
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          # Use comma-separated names to pass list arguments:
          deny-licenses: LGPL-2.0, BSD-2-Clause
  build:
    needs: opensource-license-review
    runs-on: ubuntu-latest
    env:
      CI: "false"
#    strategy:
#      matrix:
#        node-version:
#        python-version:
#    outputs:
#      self_mutation_happened: ${{ steps.self_mutation.outputs.self_mutation_happened }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Pre Build
        run: |
          npm install -g aws-cdk
          cdk --version
          BSS_IMAGE_ASSET_REPOSITORY_NAME=$(echo "${{ vars.SOLUTION_NAME }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          echo "BSS_IMAGE_ASSET_REPOSITORY_NAME=${BSS_IMAGE_ASSET_REPOSITORY_NAME}" >> $GITHUB_ENV
          BUILD_VERSION=v2.0.0_${{ github.job }}
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          if [ $(git tag -l "$BUILD_VERSION") ]; then
            git tag -d ${BUILD_VERSION}
          fi
          echo "CN_ASSETS='cn/'" >> $GITHUB_ENV
          echo "GLOBAL_ASSETS='custom-domain/'" >> $GITHUB_ENV
      - name: build
        run: |
          chmod +x ./templates/console/deployment/build-s3-dist.sh
          ${{ github.workspace }}/templates/console/deployment/build-s3-dist.sh ${{ vars.DIST_OUTPUT_BUCKET }} ${{ vars.SOLUTION_NAME }} $BUILD_VERSION ${{ vars.ECR }} ${{ vars.ECR_CN }}
          mkdir -p ${{ github.workspace }}/templates/console/deployment/open-source/ && touch ./templates/console/deployment/open-source/.empty
          cd edges/cdk/deployment
          ./build-s3-dist.sh ${{ vars.DIST_OUTPUT_BUCKET }} ${{ vars.SOLUTION_NAME }} $BUILD_VERSION
          cp -r ${{ github.workspace }}/edges/cdk/deployment/global-s3-assets/* $${{ github.workspace }}/templates/console/deployment/global-s3-assets/custom-domain/
          ls -LR ${{ github.workspace }}/templates/console/deployment/

      - name: post_build
        run: |
          # aws s3 cp s3://solutions-build-assets/changelog-spec.yml buildspec_2.yml || true
          set -euxo pipefail
          __dir="${CODEBUILD_SRC_DIR}/templates/console/deployment"
          function join_by { local IFS="$1"; shift; echo "$*"; }
          export ECR_REPOS=$(join_by , `cat "${__dir}/ecr-repos"`)
          echo "ECR_REPOS=${ECR_REPOS}" >> $GITHUB_ENV
          export CN_ECR_REPOS=$(join_by , `cat "${__dir}/cn-ecr-repos"`)
          echo "CN_ECR_REPOS=${CN_ECR_REPOS}" >> $GITHUB_ENV
          git tag -a $BUILD_VERSION -m "${{ github.job }} ${{ github.job_workflow_sha }}"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-without-markdown
          path: |
              .git/**/*
              deployment/**/*
              docs/**/*
              templates/console/deployment/**/*
              buildspec_2.yml
              deploy_vtag.yml
              CHANGELOG.md
              .cfnnagignore
              .cfnnag_*

  cfn_nag_scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: cfn_nag
        working-directory: ./sample
        run: |
          # install Ruby
          sudo apt-get install ruby-full
          gem install cfn-nag
          cfn_nag -v
          echo "CloudFormation template scanning utility installation complete `date`"
          echo "Starting CloudFormation template scanning `date` in `pwd`"
          export CFN_NAG_OPTS="--template-pattern ..*.template.json --print-suppression --fail-on-warnings"
          if [ -f ".cfnnag_global_suppress_list" ]; then export CFN_NAG_OPTS="$CFN_NAG_OPTS -b .cfnnag_global_suppress_list"; fi
          set -x; cfn_nag_scan $CFN_NAG_OPTS --input-path templates/console/deployment/global-s3-assets/
          # cfn_nag_scan --input-path .
          # echo "Completed CloudFormation template scanning `date`"